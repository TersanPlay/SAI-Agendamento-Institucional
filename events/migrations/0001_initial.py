# Generated by Django 4.2.7 on 2025-08-24 06:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome do Departamento')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Departamento',
                'verbose_name_plural': 'Departamentos',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nome do Evento')),
                ('start_datetime', models.DateTimeField(verbose_name='Data e Hora de Início')),
                ('end_datetime', models.DateTimeField(verbose_name='Data e Hora de Término')),
                ('location_mode', models.CharField(choices=[('presencial', 'Presencial'), ('virtual', 'Virtual'), ('hibrido', 'Híbrido')], max_length=20, verbose_name='Modalidade')),
                ('virtual_link', models.URLField(blank=True, help_text='Para eventos virtuais ou híbridos', verbose_name='Link Virtual')),
                ('target_audience', models.CharField(choices=[('publico_interno', 'Público Interno'), ('publico_externo', 'Público Externo'), ('ambos', 'Ambos')], max_length=20, verbose_name='Público-alvo')),
                ('status', models.CharField(choices=[('planejado', 'Planejado'), ('em_andamento', 'Em Andamento'), ('concluido', 'Concluído'), ('cancelado', 'Cancelado')], default='planejado', max_length=20, verbose_name='Status')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('observations', models.TextField(blank=True, verbose_name='Observações')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('is_public', models.BooleanField(default=False, help_text='Visível na área pública do sistema', verbose_name='Evento Público')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_events', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.department', verbose_name='Departamento Responsável')),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'ordering': ['-start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('reuniao', 'Reunião'), ('audiencia_publica', 'Audiência Pública'), ('sessao_plenaria', 'Sessão Plenária'), ('palestra', 'Palestra'), ('workshop', 'Workshop'), ('seminario', 'Seminário'), ('congresso', 'Congresso'), ('curso_capacitacao', 'Curso/Capacitação'), ('mesa_redonda', 'Mesa-Redonda'), ('debate', 'Debate'), ('conferencia', 'Conferência'), ('encontro_tematico', 'Encontro Temático'), ('assembleia', 'Assembleia'), ('visita_tecnica', 'Visita Técnica'), ('cerimonia_oficial', 'Cerimônia Oficial'), ('lancamento_projeto', 'Lançamento de Projeto/Programa'), ('coletiva_imprensa', 'Coletiva de Imprensa'), ('atividade_cultural', 'Atividade Cultural'), ('atividade_comunitaria', 'Atividade Comunitária'), ('outros', 'Outros')], max_length=50, unique=True, verbose_name='Tipo')),
                ('color', models.CharField(default='#3B82F6', help_text='Código hex da cor (#RRGGBB)', max_length=7, verbose_name='Cor')),
                ('icon', models.CharField(default='fas fa-calendar', help_text='Classe do ícone FontAwesome', max_length=50, verbose_name='Ícone')),
            ],
            options={
                'verbose_name': 'Tipo de Evento',
                'verbose_name_plural': 'Tipos de Eventos',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('auditorio', 'Auditório'), ('plenarinho', 'Plenarinho'), ('presidencia', 'Presidência'), ('gabinete', 'Gabinete'), ('estacionamento_interno', 'Estacionamento Interno'), ('estacionamento_externo', 'Estacionamento Externo'), ('estacionamento_ambos', 'Estacionamento (Interno e Externo)'), ('virtual', 'Virtual'), ('outros', 'Outros')], max_length=50, verbose_name='Localização')),
                ('custom_name', models.CharField(blank=True, help_text='Para gabinetes ou locais específicos', max_length=100, verbose_name='Nome Personalizado')),
                ('capacity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Capacidade')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
            ],
            options={
                'verbose_name': 'Localização',
                'verbose_name_plural': 'Localizações',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EventHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=50, verbose_name='Campo Alterado')),
                ('old_value', models.TextField(verbose_name='Valor Anterior')),
                ('new_value', models.TextField(verbose_name='Novo Valor')),
                ('changed_at', models.DateTimeField(auto_now_add=True, verbose_name='Data da Alteração')),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Alterado por')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='events.event')),
            ],
            options={
                'verbose_name': 'Histórico do Evento',
                'verbose_name_plural': 'Histórico dos Eventos',
                'ordering': ['-changed_at'],
            },
        ),
        migrations.CreateModel(
            name='EventDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Título do Documento')),
                ('external_link', models.URLField(verbose_name='Link Externo')),
                ('uploaded_file', models.FileField(blank=True, upload_to='event_documents/', verbose_name='Arquivo (opcional)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='events.event')),
            ],
            options={
                'verbose_name': 'Documento do Evento',
                'verbose_name_plural': 'Documentos dos Eventos',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.eventtype', verbose_name='Tipo de Evento'),
        ),
        migrations.AddField(
            model_name='event',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.location', verbose_name='Localização'),
        ),
        migrations.AddField(
            model_name='event',
            name='responsible_person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='responsible_events', to=settings.AUTH_USER_MODEL, verbose_name='Responsável do Evento'),
        ),
        migrations.CreateModel(
            name='EventParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Para participantes externos', max_length=100, verbose_name='Nome')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('confirmed', models.BooleanField(default=False, verbose_name='Confirmado')),
                ('attended', models.BooleanField(default=False, verbose_name='Compareceu')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='events.event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Participante',
                'verbose_name_plural': 'Participantes',
                'unique_together': {('event', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_datetime'], name='events_even_start_d_b72861_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='events_even_status_5709b6_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type'], name='events_even_event_t_6cb7b2_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['department'], name='events_even_departm_cfdfa6_idx'),
        ),
    ]
